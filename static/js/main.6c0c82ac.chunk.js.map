{"version":3,"sources":["utils/FormatDate.js","components/Header.jsx","components/AddNote.jsx","redux/Actions.js","components/Todo.jsx","screen/TodoListContainer.js","screen/DashBoard.js","App.js","redux/Reducers/Todo.js","redux/Reducers/Tab.js","redux/Reducers/index.js","redux/Store.js","index.js"],"names":["months","days","getDay","date","Date","getMonth","getYear","getFullYear","getDate","Header","className","to","activeClassName","connect","dispatch","addTodo","todo","type","useState","input","setInput","placeholder","onKeyDown","event","key","status","id","uuidv1","text","alert","value","onChange","target","deleteTodo","todoid","updateTodo","data","setStatus","updateStatusHandler","Provider","onClick","state","todoList","Todo","location","useLocation","pathname","filter","element","map","DashBoard","console","log","App","exact","from","path","component","initialization","action","Object","assign","activeTab","Tab","actionTab","tab","combineReducers","store","createStore","reducer","getState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6c0c82ac.chunk.js","sourcesContent":["const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\nconst days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n\r\n\r\n\r\n\r\nexport const getDay = () => {\r\n  const date = new Date()\r\n  return days[date.getDay()]\r\n}\r\nexport const getMonth = () => {\r\n  const date = new Date()\r\n  return months[date.getMonth()]\r\n}\r\nexport const getYear = () => {\r\n  const date = new Date()\r\n  return date.getFullYear();\r\n}\r\nexport const getDate = () => {\r\n  const date = new Date()\r\n  return date.getDate()\r\n}\r\n\r\nexport default {\r\n  getDay, getMonth, getDate, getYear\r\n}\r\n\r\n","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nfunction Header() {\r\n\r\n  return (\r\n    <div className=\"nav\">\r\n\r\n      <NavLink className=\"nav__link\" to=\"/home\" activeClassName=\"nav__link--active\">Home</NavLink>\r\n      <NavLink className=\"nav__link\" to=\"/completed\" activeClassName=\"nav__link--active\">Completed</NavLink>\r\n      <NavLink className=\"nav__link\" to=\"/incomplete\" activeClassName=\"nav__link--active\">Remaining</NavLink>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Header","import React, { useState } from 'react'\r\nimport { v1 as uuidv1 } from 'uuid';\r\nimport { addTodo } from '../redux/Actions'\r\nimport { connect } from 'react-redux'\r\nfunction AddNote({ addTodo }) {\r\n  const [input, setInput] = useState(\"\");\r\n  function addTodoHandler(event) {\r\n    if (event.key == 'Enter') {\r\n      if (input != \"\") {\r\n        //ADDNOTE\r\n        addTodo({\r\n          status: false,\r\n          id: uuidv1(),\r\n          text: input\r\n        });\r\n        setInput(\"\")\r\n      } else {\r\n        alert(\"empty field\")\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  function inputChangeHandler(event) {\r\n    setInput(event.target.value)\r\n  }\r\n  return (\r\n    <input type=\"text\" placeholder=\"Add a note (Enter)\" onKeyDown={addTodoHandler} value={input} onChange={inputChangeHandler} />\r\n\r\n  )\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addTodo: todo => dispatch(addTodo(todo))\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(AddNote);","export const addTodo = (todo) => ({\r\n  type: 'ADD_TODO',\r\n  todo\r\n});\r\n\r\nexport const deleteTodo = (todoid) => ({\r\n  type: 'DELETE_TODO',\r\n  todoid\r\n})\r\nexport const updateTodo = (todoid) => ({\r\n  type: 'UPDATE_TODO',\r\n  todoid\r\n});\r\n\r\nexport const switchTab = (tab) => ({\r\n  type: \"SWITCHTAB\",\r\n  tab\r\n})\r\n//action are function that return type action to reducer\r\n","import React, { useState } from 'react'\r\nimport { IconContext } from \"react-icons\";\r\nimport { MdCheckBox, MdCheckBoxOutlineBlank, MdDelete } from \"react-icons/md\";\r\nimport { deleteTodo, updateTodo } from '../redux/Actions'\r\nimport { connect } from 'react-redux'\r\n\r\n\r\nfunction Todo({ data: todo, deleteTodo, updateTodo }) {\r\n\r\n  const [status, setStatus] = useState(todo.status);\r\n  function deleteNoteHandler() {\r\n\r\n    deleteTodo(todo.id)\r\n  }\r\n  function updateStatusHandler() {\r\n    updateTodo(todo.id)\r\n    setStatus(!status)\r\n  }\r\n\r\n  return (\r\n    <div className=\"note\">\r\n      <IconContext.Provider value={{ className: 'icon' }}>\r\n        {todo.status ? <MdCheckBox className=\"icon\" onClick={updateStatusHandler} /> : <MdCheckBoxOutlineBlank onClick={updateStatusHandler} />}\r\n      </IconContext.Provider>\r\n      <p className={todo.status ? \"text text--line-through\" : 'text'}>{todo.text}</p>\r\n      <IconContext.Provider value={{ className: 'icon' }}>\r\n        <MdDelete onClick={deleteNoteHandler} />\r\n      </IconContext.Provider>\r\n\r\n    </div >\r\n  )\r\n}\r\nconst mapDispatchToProps = dispatch => ({\r\n  deleteTodo: todoid => dispatch(deleteTodo(todoid)),\r\n  updateTodo: todoid => dispatch(updateTodo(todoid))\r\n})\r\n\r\n\r\nexport default connect(null, mapDispatchToProps)(Todo);","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Todo from '../components/Todo'\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nfunction TodoListContainer({ todoList }) {\r\n  const location = useLocation().pathname;\r\n  function filterTodo() {\r\n    return todoList.filter(element => {\r\n      switch (location) {\r\n        case '/home':\r\n          return element;\r\n        case '/completed':\r\n          if (element.status == true) {\r\n            return element\r\n          }\r\n          break;\r\n        case '/incomplete':\r\n          if (element.status == false) {\r\n            return element\r\n          }\r\n          break;\r\n        default:\r\n          return element\r\n      }\r\n\r\n    });\r\n  }\r\n  return (\r\n    <div>\r\n      <div className=\"note-list\">\r\n        {filterTodo().map(element => <Todo data={element} key={element.id} />)}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n  todoList: state.Todo.todoList,\r\n})\r\n\r\nexport default connect(mapStateToProps, null)(TodoListContainer);","import React from 'react'\r\nimport { getDay, getMonth, getDate, getYear } from '../utils/FormatDate'\r\nimport Header from '../components/Header'\r\nimport AddNote from '../components/AddNote';\r\nimport TodoListContainer from '../screen/TodoListContainer';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nexport default function DashBoard() {\r\n  console.log(\"dash baord called\")\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"wrapper\">\r\n        <Header />\r\n        <div className=\"date-section\">\r\n          <h1>{getDay()}</h1>\r\n          <p> {getMonth() + \" \" + getDate() + \", \" + getYear()}</p>\r\n        </div>\r\n        <div className=\"body\">\r\n          {useLocation().pathname == '/home' ? <AddNote /> : \"\"}\r\n\r\n          <TodoListContainer />\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react';\r\nimport { BrowserRouter as Router, Route, Switch, Link, Redirect } from 'react-router-dom'\r\nimport './styles/style.scss'\r\n\r\nimport DashBoard from './screen/DashBoard';\r\n//initializing store \r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Redirect exact from=\"/\" to=\"/home\" />\r\n        <Route exact path='/home' component={DashBoard} />\r\n        <Route exact path='/completed' component={DashBoard} />\r\n        <Route exact path='/incomplete' component={DashBoard} />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n\r\n}\r\nexport default App;\r\n","const initialization = {\r\n  todoList: []\r\n}\r\nconst Todo = (state = initialization, action) => {\r\n\r\n  switch (action.type) {\r\n    case 'ADD_TODO':\r\n      state = Object.assign({}, state, {\r\n        todoList: [...state.todoList, action.todo]\r\n      })\r\n      break;\r\n    case 'DELETE_TODO':\r\n      state = Object.assign({}, state, {\r\n        todoList: [...state.todoList.filter((todo) => todo.id !== action.todoid)]\r\n      })\r\n      break;\r\n    case 'UPDATE_TODO':\r\n      state = Object.assign({}, state, {\r\n        todoList: [...state.todoList.map((todo) => {\r\n          if (todo.id == action.todoid) {\r\n            todo.status = !todo.status\r\n          }\r\n          return todo\r\n        })]\r\n      })\r\n      break;\r\n    default:\r\n      return state\r\n  }\r\n  return state;\r\n}\r\n\r\nexport default Todo","const initialization = {\r\n  activeTab: 'HOME'\r\n}\r\nconst Tab = (state = initialization, action) => {\r\n\r\n  if (action.type == \"SWITCHTAB\") {\r\n    state = Object.assign({}, state, {\r\n      actionTab: action.tab\r\n    })\r\n  }\r\n  return state;\r\n}\r\n\r\nexport default Tab","import Todo from './Todo'\r\nimport Tab from './Tab'\r\nimport { combineReducers } from 'redux'\r\n\r\nexport default combineReducers({\r\n  Todo, Tab\r\n})","import { createStore } from \"redux\";\r\nimport reducer from './Reducers'\r\n\r\nexport const store = createStore(reducer);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux'\r\nimport { store } from './redux/Store'\r\n\r\n\r\nconsole.log(store.getState())\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n  ,\r\n  document.getElementById('root'));\r\n\r\n\r\n\r\n\r\n/*\r\n\r\nredux\r\n\r\n\r\n1.Action:\r\n -->Action are the payload which send data to be save in store.\r\n -->action are send via dispatch().\r\n -->actions are basically plain js object which must contain the 'type' which indicate what types of\r\n     action need to be performed in store.\r\n -->action creator is function that create action\r\n    //* function addTodo(text){\r\n    //*  return{\r\n    //*  type:'ADDTODO',\r\n    //*  text:text\r\n    //*  }\r\n    //* }\r\n\r\n  -->action can be dispatch using store.dispatch(action) but in application we access dispatch using\r\n    helper like react-redux connect()\r\n\r\n\r\n2.Reducer\r\n -->in action we only define what action need to perform but dont describe how the application change\r\n   state\r\n --> reducer is pure function which take previous state of store and action and return new state\r\n      (prevState,action)=>newState\r\n\r\n  -->it is important that reducer need to pure function.\r\n  -->thing you should never do in reducer\r\n      1.mutation\r\n      2.perform side effect like Api call and routing transaction\r\n      3.call non pure function e.g date.now() or math.random()\r\n\r\n\r\n\r\n\r\n\r\n  3.store:\r\n  -->it is single giant object  which hold complete state tree of app\r\n  -->and have following responsibilites\r\n    1.hold application state\r\n    2.allow access application state by getState()\r\n    3.allow state to update using dispatch(Action)\r\n    4.register listener via subscrib(listener)\r\n    5.handle unregistering the listener using subscribe(listener)\r\n\r\n    //*const store=createStore(reducer)\r\n  -->createstore args\r\n      1.reducer:function that return next state upon prev state and action\r\n      2.[preloadedState]:initial state\r\n      3.[enhancer]:store enhancer.only enhancer that come with redux is applyMiddleware\r\n  --> dont create more than one store.instead use combinereducer to create single root tree of many reducer\r\n\r\n  --> when store is created redux dispatch a dummy action to reducer to populate  the state with initial value\r\n\r\n\r\n 4. subcribe:\r\n   -->add change listener\r\n   -->it is called every time action is dispatch and some part of state tree has been changed\r\n\r\n*/\r\n\r\n/*\r\n\r\nData flow of redux\r\n\r\n1.call store.dispatch(Action)\r\n   -->store.dispatch call be called from anywhere in app\r\n2.the store call the reducer function which is passed args during initialization\r\n  store will pass two argument to reducer current state  tree and action\r\n\r\n3. the root reducer may combine the output from mulitple reducer into a single tree and return that tree\r\n\r\n4.redux save the completed tree return from the reducer.\r\n  every listener subscribe to store will be invoked and listener may call getState to get new state tree\r\n\r\n\r\n\r\n\r\n*/\r\n"],"sourceRoot":""}